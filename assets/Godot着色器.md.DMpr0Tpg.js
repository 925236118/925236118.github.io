import{_ as a,c as e,o as t,a6 as o}from"./chunks/framework.3YdPo1hh.js";const m=JSON.parse('{"title":"Godot着色器","description":"","frontmatter":{"date":"2024-07-05T00:00:00.000Z","title":"Godot着色器"},"headers":[],"relativePath":"Godot着色器.md","filePath":"Godot着色器.md","lastUpdated":1744724908000}'),l={name:"Godot着色器.md"},r=o('<h1 id="godot着色器" tabindex="-1">Godot着色器 <a class="header-anchor" href="#godot着色器" aria-label="Permalink to &quot;Godot着色器&quot;">​</a></h1><h2 id="函数说明" tabindex="-1">函数说明 <a class="header-anchor" href="#函数说明" aria-label="Permalink to &quot;函数说明&quot;">​</a></h2><p>Godot着色器中有三个函数，分别为顶点着色器，片段着色器，灯光着色器。执行顺序同上。</p><h3 id="顶点着色器" tabindex="-1">顶点着色器 <a class="header-anchor" href="#顶点着色器" aria-label="Permalink to &quot;顶点着色器&quot;">​</a></h3><p>顶点着色器（vertex）控制所有的顶点，可以使顶点位置等发生变化。使用vertex可以方便缩放，移动，斜切等操作。</p><h3 id="片段着色器" tabindex="-1">片段着色器 <a class="header-anchor" href="#片段着色器" aria-label="Permalink to &quot;片段着色器&quot;">​</a></h3><p>片段着色器（fragment）控制所有的像素，可以修改像素的颜色、透明度等信息。使用fragment可以方便操作滤镜、透明、混色等操作。</p><h3 id="灯光着色器" tabindex="-1">灯光着色器 <a class="header-anchor" href="#灯光着色器" aria-label="Permalink to &quot;灯光着色器&quot;">​</a></h3><p>灯光着色器（light）为每一个像素运行一次灯光，方便根据法线、灯光、颜色等控制像素当前的灯光情况。</p><h2 id="语法" tabindex="-1">语法 <a class="header-anchor" href="#语法" aria-label="Permalink to &quot;语法&quot;">​</a></h2><ul><li>varying <ul><li>要从顶点处理器函数往片段（或者灯光）处理器函数里发送数据，可以使用 varying</li></ul></li><li>uniform <ul><li>设置外部传值</li></ul></li></ul><h2 id="着色器空间" tabindex="-1">着色器空间 <a class="header-anchor" href="#着色器空间" aria-label="Permalink to &quot;着色器空间&quot;">​</a></h2><p>在Godot中，共有四个空间，分别是：</p><ul><li>局部空间（Local Space） <ul><li>局部空间的坐标UV取值范围为(0, 1)，原点为左上角。</li></ul></li><li>世界空间（World Space） <ul><li>世界坐标是编辑器中通常使用的坐标。</li></ul></li><li>画布空间（Canvas Space） <ul><li>画布空间坐标范围为(0, 0)到视口大小，原点为屏幕左上角。</li></ul></li><li>屏幕空间（Screen Space） <ul><li>屏幕空间坐标范围为(-1, 1)，原点为屏幕中心。</li></ul></li></ul><p>可以分别使用Vertex内置的MODEL_MATRIX、CANVAS_MATRIX、SCREEN_MATRIX一步步向上转换。</p><h2 id="特殊用法" tabindex="-1">特殊用法 <a class="header-anchor" href="#特殊用法" aria-label="Permalink to &quot;特殊用法&quot;">​</a></h2><h3 id="二维shader获取当前uv的像素坐标" tabindex="-1">二维shader获取当前uv的像素坐标 <a class="header-anchor" href="#二维shader获取当前uv的像素坐标" aria-label="Permalink to &quot;二维shader获取当前uv的像素坐标&quot;">​</a></h3><p>使用<code>UV / TEXTURE_PIXEL_SIZE</code>可获取到当前uv的像素坐标。</p><h3 id="获取屏幕纹理" tabindex="-1">获取屏幕纹理 <a class="header-anchor" href="#获取屏幕纹理" aria-label="Permalink to &quot;获取屏幕纹理&quot;">​</a></h3><p>使用<code>uniform sampler2D screen_tex: hint_screen_texture, filter_nearest;</code>获取屏幕纹理，在Godot4.x中，已经弃用<code>SCREEN_TEXTURE</code>内置变量。</p>',20),i=[r];function d(h,n,c,s,u,_){return t(),e("div",null,i)}const f=a(l,[["render",d]]);export{m as __pageData,f as default};
